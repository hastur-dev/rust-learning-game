name: "Level 24 - Smart Pointers - Box<T>"
grid_size: "25x20"
start_position: [1, 1]
max_turns: 0
fog_of_war: true
income_per_square: 1

obstacles: 24
enemies:
  - start_location: [23, 18]
    movement_pattern: "horizontal"
    moving_positive: false
  - start_location: [24, 20]
    movement_pattern: "vertical"
    moving_positive: true
  - start_location: [22, 21]
    movement_pattern: "circular"
    moving_positive: false
  - start_location: [21, 20]
    movement_pattern: "horizontal"
    moving_positive: true
  - start_location: [18, 17]
    movement_pattern: "vertical"
    moving_positive: false
  - start_location: [23, 14]
    movement_pattern: "circular"
    moving_positive: true
  - start_location: [14, 21]
    movement_pattern: "horizontal"
    moving_positive: false
  - start_location: [10, 15]
    movement_pattern: "vertical"
    moving_positive: true

doors:
  - [23, 23]
  - [23, 22]
  - [23, 20]
  - [23, 18]
  - [19, 21]
  - [16, 20]
  - [12, 19]

items:
  - name: "box_basics_tip"
    item_file: "items/box_basics.rs"
    spawn_randomly: false
    location: [23, 22]
  - name: "heap_allocation_tip"
    item_file: "items/heap_allocation.rs"
    spawn_randomly: false
    location: [23, 20]
  - name: "recursive_types_tip"
    item_file: "items/recursive_types.rs"
    spawn_randomly: false
    location: [24, 24]
  - name: "deref_coercion_tip"
    item_file: "items/deref_coercion.rs"
    spawn_randomly: false
    location: [21, 20]
  - name: "box_patterns_tip"
    item_file: "items/box_patterns.rs"
    spawn_randomly: false
    location: [23, 16]
  - name: "dyn_sizing_tip"
    item_file: "items/dyn_sizing.rs"
    spawn_randomly: false
    location: [18, 20]
  - name: "goal_item"
    item_file: "items/level_complete.rs"
    spawn_randomly: false
    location: [24, 22]

message: "Enter the world of Smart Pointers with Box<T>! Box provides heap allocation for data that might be too large for the stack or when you need dynamic sizing. Essential for recursive data structures."

hint_message: "Box<T>: Heap allocation, single ownership. Box::new(value) creates, * dereferences. Enables recursive types like Box<Node>. Automatically derefs, so box.method() works like (*box).method()."