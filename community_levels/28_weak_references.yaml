name: "Level 28 - Weak References"
grid_size: "25x20"
start_position: [1, 1]
max_turns: 0
fog_of_war: true
income_per_square: 1

obstacles: 28
enemies:
  - start_location: [23, 18]
    movement_pattern: "horizontal"
    moving_positive: false
  - start_location: [24, 24]
    movement_pattern: "vertical"
    moving_positive: true
  - start_location: [22, 25]
    movement_pattern: "circular"
    moving_positive: false
  - start_location: [24, 21]
    movement_pattern: "horizontal"
    moving_positive: true
  - start_location: [22, 21]
    movement_pattern: "vertical"
    moving_positive: false
  - start_location: [23, 18]
    movement_pattern: "circular"
    moving_positive: true
  - start_location: [18, 25]
    movement_pattern: "horizontal"
    moving_positive: false
  - start_location: [14, 19]
    movement_pattern: "vertical"
    moving_positive: true

doors:
  - [23, 27]
  - [23, 26]
  - [24, 23]
  - [23, 22]
  - [23, 25]
  - [20, 20]
  - [16, 23]

items:
  - name: "weak_basics_tip"
    item_file: "items/weak_basics.rs"
    spawn_randomly: false
    location: [24, 26]
  - name: "rc_downgrade_tip"
    item_file: "items/rc_downgrade.rs"
    spawn_randomly: false
    location: [23, 24]
  - name: "weak_upgrade_tip"
    item_file: "items/weak_upgrade.rs"
    spawn_randomly: false
    location: [24, 28]
  - name: "weak_strong_counts_tip"
    item_file: "items/weak_strong_counts.rs"
    spawn_randomly: false
    location: [24, 21]
  - name: "tree_structures_tip"
    item_file: "items/tree_structures.rs"
    spawn_randomly: false
    location: [23, 20]
  - name: "observer_pattern_tip"
    item_file: "items/observer_pattern.rs"
    spawn_randomly: false
    location: [22, 20]
  - name: "goal_item"
    item_file: "items/level_complete.rs"
    spawn_randomly: false
    location: [24, 26]

message: "Break reference cycles with Weak<T>! Weak references don't affect reference counting and can become invalid. Perfect for parent-child relationships and observer patterns where you need non-owning references."

hint_message: "Weak<T>: Non-owning reference. Rc::downgrade() creates Weak, weak.upgrade() returns Option<Rc<T>>. Doesn't affect strong_count. Use for back-references and breaking cycles."