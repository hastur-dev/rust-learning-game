name: "Level 27 - Memory Leaks & Reference Cycles"
grid_size: "25x20"
start_position: [1, 1]
max_turns: 0
fog_of_war: true
income_per_square: 1

obstacles: 27
enemies:
  - start_location: [23, 18]
    movement_pattern: "horizontal"
    moving_positive: false
  - start_location: [24, 23]
    movement_pattern: "vertical"
    moving_positive: true
  - start_location: [22, 24]
    movement_pattern: "circular"
    moving_positive: true
  - start_location: [24, 20]
    movement_pattern: "horizontal"
    moving_positive: false
  - start_location: [21, 20]
    movement_pattern: "vertical"
    moving_positive: true
  - start_location: [23, 17]
    movement_pattern: "circular"
    moving_positive: false
  - start_location: [17, 24]
    movement_pattern: "horizontal"
    moving_positive: true
  - start_location: [13, 18]
    movement_pattern: "vertical"
    moving_positive: false

doors:
  - [23, 26]
  - [23, 25]
  - [24, 22]
  - [23, 21]
  - [22, 24]
  - [19, 20]
  - [15, 22]

items:
  - name: "reference_cycles_tip"
    item_file: "items/reference_cycles.rs"
    spawn_randomly: false
    location: [24, 25]
  - name: "memory_leaks_tip"
    item_file: "items/memory_leaks.rs"
    spawn_randomly: false
    location: [23, 23]
  - name: "cycle_detection_tip"
    item_file: "items/cycle_detection.rs"
    spawn_randomly: false
    location: [24, 27]
  - name: "breaking_cycles_tip"
    item_file: "items/breaking_cycles.rs"
    spawn_randomly: false
    location: [24, 20]
  - name: "parent_child_tip"
    item_file: "items/parent_child.rs"
    spawn_randomly: false
    location: [23, 19]
  - name: "cycle_prevention_tip"
    item_file: "items/cycle_prevention.rs"
    spawn_randomly: false
    location: [21, 20]
  - name: "goal_item"
    item_file: "items/level_complete.rs"
    spawn_randomly: false
    location: [24, 25]

message: "Understand Rust's weakness: Reference Cycles! While Rust prevents most memory leaks, Rc<RefCell<T>> can create cycles where references keep each other alive. Learn to detect and prevent them."

hint_message: "Reference cycles: A→B→A with Rc creates leak. Strong references keep data alive indefinitely. Use Weak references to break cycles. Parent-child relationships often need weak child→parent links."