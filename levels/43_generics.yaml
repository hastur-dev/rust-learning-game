name: "Level 43 - Generics"
grid_size: "25x20"
start_position: [1, 1]
max_turns: 0
fog_of_war: true
income_per_square: 1

obstacles: 43
enemies:
  - start_location: [23, 18]
    movement_pattern: "horizontal"
    moving_positive: false
  - start_location: [24, 39]
    movement_pattern: "vertical"
    moving_positive: true
  - start_location: [22, 40]
    movement_pattern: "circular"
    moving_positive: true
  - start_location: [24, 36]
    movement_pattern: "horizontal"
    moving_positive: false
  - start_location: [24, 36]
    movement_pattern: "vertical"
    moving_positive: true
  - start_location: [23, 33]
    movement_pattern: "circular"
    moving_positive: false
  - start_location: [24, 40]
    movement_pattern: "horizontal"
    moving_positive: true
  - start_location: [24, 34]
    movement_pattern: "vertical"
    moving_positive: false

doors:
  - [23, 42]
  - [23, 41]
  - [24, 38]
  - [23, 37]
  - [24, 40]
  - [24, 31]
  - [24, 38]

items:
  - name: "generic_functions_tip"
    item_file: "items/generic_functions.rs"
    spawn_randomly: false
    location: [24, 41]
  - name: "generic_structs_tip"
    item_file: "items/generic_structs.rs"
    spawn_randomly: false
    location: [23, 39]
  - name: "generic_enums_tip"
    item_file: "items/generic_enums.rs"
    spawn_randomly: false
    location: [24, 43]
  - name: "where_clauses_tip"
    item_file: "items/where_clauses.rs"
    spawn_randomly: false
    location: [24, 36]
  - name: "monomorphization_tip"
    item_file: "items/monomorphization.rs"
    spawn_randomly: false
    location: [23, 35]
  - name: "const_generics_tip"
    item_file: "items/const_generics.rs"
    spawn_randomly: false
    location: [24, 33]
  - name: "goal_item"
    item_file: "items/level_complete.rs"
    spawn_randomly: false
    location: [24, 41]

message: "Write flexible, reusable code with Generics! Create functions, structs, and enums that work with multiple types. Learn type parameters, trait bounds, where clauses, and const generics."

hint_message: "Generics: <T> syntax for type parameters. Trait bounds: <T: Trait>. where clauses for complex bounds. Zero-cost: monomorphization creates specialized versions. Const generics: <const N: usize>."