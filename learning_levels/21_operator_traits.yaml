# Level 21: Operator Traits Mastery
# This level teaches operator overloading with Add, Sub, Mul, Div, and other operator traits
# Players learn to implement custom operators for types and create mathematical abstractions

level_id: 21
name: "Robot Physics Engine Programmer"
description: "‚öôÔ∏è FINAL MASTERY! Program the robot's physics engine by overloading operators - make +, -, *, / control movement, forces, and interactions with the world!"
next_level: 22

# Grid layout: 20x12 with mathematical operation zones
grid:
  width: 20
  height: 12
  start_position: [1, 1]

walls:
  - [0, 0, 19, 0]    # Top wall
  - [0, 11, 19, 11]  # Bottom wall
  - [0, 0, 0, 11]    # Left wall
  - [19, 0, 19, 11]  # Right wall
  - [5, 1, 5, 10]    # Arithmetic zone
  - [10, 1, 10, 10]  # Comparison zone
  - [15, 1, 15, 10]  # Advanced operators zone
  - [2, 3, 18, 3]    # Horizontal divider
  - [2, 7, 18, 7]    # Lower divider

# Items teach different operator trait concepts
items:
  # Task 1: Basic arithmetic operators (Add, Sub, Mul, Div)
  - position: [2, 2]
    item_type: "robot_movement_physics_core"
    name: "Robot Movement Physics Engine"
    description: "‚öôÔ∏è PHYSICS MASTERY! The robot's movement system is broken! Rebuild it by making + and - operators control how the robot moves through space!"
    content: |
      üöÄ ROBOT PHYSICS ENGINE - MOVEMENT CORE üöÄ

      üéØ CURRENT ROBOT STATE:
      Position: Point2D { x: 15.5, y: 23.7 } (where the robot IS)
      Velocity: Vector2D { dx: 2.1, dy: -1.3 } (how fast robot is moving)
      Acceleration: Vector2D { dx: 0.5, dy: 0.8 } (how velocity changes)
      Target: Point2D { x: 20.0, y: 18.0 } (where robot wants to go)

      ‚öôÔ∏è PHYSICS CRISIS: The robot's movement system has crashed! It can't understand
      how to combine position + velocity, or calculate target - current position.
      The mathematical operations that control robot movement need to be rebuilt!

      üéØ PHYSICS PROGRAMMING MISSION:
      - + operator: position + velocity = new position after movement
      - - operator: target - current = direction vector to move
      - * operator: velocity * time = displacement distance
      - / operator: force / mass = acceleration for movement

      ü§ñ ROBOT PHYSICS LAWS:
      Position + Velocity = Where robot moves to
      Target - Current = Direction robot should go
      Velocity * Time = How far robot travels
      Force / Mass = How fast robot accelerates

      üèÜ PHYSICS MASTERY: Robot can now understand movement through mathematical operators!
    requirements:
      - "Implement Add trait for custom types with + operator"
      - "Create Sub trait implementation for - operator"
      - "Implement Mul trait for scalar and vector multiplication"
      - "Create Div trait implementation for division operations"

  # Task 2: Assignment operators (AddAssign, SubAssign, etc.)
  - position: [7, 2]
    item_type: "robot_state_updater"
    name: "Robot State Evolution System"
    description: "üîÑ REAL-TIME UPDATES! The robot needs live state updates! Program += and -= operators so the robot can modify itself in real-time!"
    content: |
      üîÑ ROBOT REAL-TIME STATE SYSTEM üîÑ

      ü§ñ LIVE ROBOT STATE UPDATES:
      - Energy: battery_level += energy_consumed (robot uses power)
      - Position: current_pos += movement_vector (robot moves incrementally)
      - Inventory: item_count -= items_used (robot consumes resources)
      - Experience: skill_level *= learning_multiplier (robot gets smarter)

      ‚ö° REAL-TIME CRISIS: The robot needs to update its state LIVE as it operates!
      Instead of calculating entirely new states, it needs to incrementally
      modify its current values. The robot must evolve its state in-place
      for maximum efficiency.

      üéØ LIVE UPDATE PROGRAMMING MISSION:
      - += operator: Add energy consumption, movement, experience to current state
      - -= operator: Subtract used resources, lost health, expired timers
      - *= operator: Apply efficiency multipliers, skill improvements, speed boosts
      - /= operator: Apply damage reduction, wear degradation, cooling factors

      ü§ñ ROBOT STATE LAWS:
      Current State += Change = Evolved State
      Resources -= Usage = Remaining Resources
      Performance *= Improvement = Enhanced Performance
      Condition /= Wear = Current Condition

      üèÜ LIVE EVOLUTION: Robot can now update itself in real-time as it experiences the world!
    requirements:
      - "Implement AddAssign trait for += operator"
      - "Create SubAssign trait for -= operator"
      - "Implement MulAssign trait for *= operator"
      - "Create DivAssign trait for /= operator"

  # Task 3: Comparison operators (PartialEq, PartialOrd, Ord)
  - position: [12, 2]
    item_type: "comparator_system"
    name: "Robot Priority Comparator"
    description: "Ranking system requiring custom comparison operators for robot priorities"
    content: |
      // Robot priority comparison requirements
      Priority Factors:
      - Task Urgency: High, Medium, Low priority levels
      - Battery Level: Remaining energy percentage
      - Distance: Proximity to target location
      - Capability: Sensor count and processing power

      Task: Implement comparison traits for robot priority ordering
      Requirements:
      - Implement PartialEq trait for equality comparison
      - Implement PartialOrd trait for partial ordering
      - Implement Ord trait for total ordering
      - Handle edge cases and NaN-like values
    requirements:
      - "Implement PartialEq trait for == and != operators"
      - "Create PartialOrd trait for <, <=, >, >= operators"
      - "Implement Ord trait for total ordering with cmp method"
      - "Handle comparison edge cases and invalid states"

  # Task 4: Bitwise operators (BitAnd, BitOr, BitXor)
  - position: [17, 2]
    item_type: "flag_processor"
    name: "Robot Permission Flags"
    description: "Permission system using bitwise operators for flag combinations"
    content: |
      // Permission flags requiring bitwise operations
      Robot Capabilities:
      - MOVE: 0b00000001 (can move)
      - SCAN: 0b00000010 (can scan)
      - PICK: 0b00000100 (can pick items)
      - COMM: 0b00001000 (can communicate)
      - PROC: 0b00010000 (can process data)

      Operations:
      - Combine: permissions1 | permissions2
      - Common: permissions1 & permissions2
      - Toggle: permissions1 ^ permissions2

      Task: Implement bitwise operator traits for flag manipulation
      Requirements:
      - Implement BitAnd trait for & operations
      - Implement BitOr trait for | operations
      - Implement BitXor trait for ^ operations
      - Implement Not trait for ! operations
    requirements:
      - "Implement BitAnd trait for & operator on custom flags"
      - "Create BitOr trait for | operator combinations"
      - "Implement BitXor trait for ^ operator toggling"
      - "Create Not trait for ! operator inversion"

  # Task 5: Advanced operators (Index, Deref, Display, Debug)
  - position: [8, 9]
    item_type: "advanced_operators"
    name: "Smart Container System"
    description: "Advanced container requiring indexing, dereferencing, and formatting operators"
    content: |
      // Smart container requiring advanced operator implementations
      Container Features:
      - Indexing: grid[x][y] access to 2D robot map
      - Dereferencing: *smart_ptr access to contained value
      - Display: readable output format for users
      - Debug: detailed debug information for developers
      - From/Into: automatic type conversions

      Task: Implement advanced operator traits for smart containers
      Requirements:
      - Implement Index and IndexMut traits for [] operations
      - Implement Deref and DerefMut traits for * operations
      - Implement Display trait for user-friendly formatting
      - Implement Debug trait for development debugging
      - Implement From/Into traits for type conversions
    requirements:
      - "Implement Index and IndexMut traits for array-like access"
      - "Create Deref and DerefMut traits for pointer-like behavior"
      - "Implement Display trait for user-friendly string representation"
      - "Create Debug trait for detailed debugging output"
      - "Implement From/Into traits for automatic type conversions"

# Enemies represent operator trait implementation challenges
enemies:
  - position: [3, 5]
    enemy_type: "overflow_demon"
    name: "Arithmetic Overflow Demon"
    health: 35
    description: "Integer overflow in arithmetic operations - defeat with checked arithmetic"

  - position: [8, 5]
    enemy_type: "assignment_bug"
    name: "Assignment Operation Bug"
    health: 30
    description: "Incorrect in-place operations - defeat with proper assignment traits"

  - position: [13, 5]
    enemy_type: "comparison_trap"
    name: "Comparison Logic Trap"
    health: 40
    description: "Inconsistent comparison implementations - defeat with logical ordering"

  - position: [17, 5]
    enemy_type: "bitwise_error"
    name: "Bitwise Logic Error"
    health: 28
    description: "Incorrect bitwise operations - defeat with proper flag logic"

  - position: [6, 10]
    enemy_type: "trait_complexity"
    name: "Trait Complexity Beast"
    health: 45
    description: "Overly complex trait implementations - defeat with clean abstractions"

  - position: [11, 10]
    enemy_type: "conversion_chaos"
    name: "Type Conversion Chaos"
    health: 38
    description: "Problematic type conversions - defeat with safe From/Into traits"

# Doors represent operator trait concept progression
doors:
  - position: [1, 5]
    door_type: "arithmetic_door"
    name: "Arithmetic Operations Gate"
    key_requirement: "Basic arithmetic trait mastery"
    description: "Access to assignment operators"

  - position: [6, 6]
    door_type: "assignment_door"
    name: "Assignment Operators Portal"
    key_requirement: "Assignment trait proficiency"
    description: "Enter comparison operations zone"

  - position: [11, 6]
    door_type: "comparison_door"
    name: "Comparison Traits Chamber"
    key_requirement: "Comparison trait expertise"
    description: "Access to bitwise operations"

  - position: [16, 6]
    door_type: "bitwise_door"
    name: "Bitwise Operations Vault"
    key_requirement: "Bitwise trait skills"
    description: "Advanced operator implementation area"

  - position: [9, 4]
    door_type: "advanced_door"
    name: "Advanced Operators Sanctum"
    key_requirement: "Complete operator mastery"
    description: "Ultimate operator trait implementation zone"

# Task definitions with learning objectives
tasks:
  - id: 1
    name: "Arithmetic Operator Traits"
    description: "Implement basic arithmetic operators for custom geometric and mathematical types"
    requirements:
      - "Create Add trait implementation for + operator on custom types"
      - "Implement Sub trait for - operator with proper semantics"
      - "Design Mul trait for scalar and vector multiplication operations"
      - "Create Div trait implementation with error handling for division"
    item_location: [2, 2]
    completion_message: "Arithmetic operators mastered! Custom mathematical operations implemented."

  - id: 2
    name: "Assignment Operator Implementation"
    description: "Create efficient in-place operations using assignment operator traits"
    requirements:
      - "Implement AddAssign trait for efficient += operations"
      - "Create SubAssign trait for -= operator with state modification"
      - "Design MulAssign trait for *= operations on custom types"
      - "Implement DivAssign trait for /= operator with safety checks"
    item_location: [7, 2]
    completion_message: "Assignment operators perfected! Efficient in-place modifications achieved."

  - id: 3
    name: "Comparison Trait Mastery"
    description: "Implement comprehensive comparison operators for custom ordering and equality"
    requirements:
      - "Create PartialEq trait for == and != operators with proper logic"
      - "Implement PartialOrd trait for <, <=, >, >= comparison operators"
      - "Design Ord trait for total ordering with consistent cmp method"
      - "Handle comparison edge cases and maintain logical consistency"
    item_location: [12, 2]
    completion_message: "Comparison traits achieved! Custom ordering and equality logic implemented."

  - id: 4
    name: "Bitwise Operator Implementation"
    description: "Create bitwise operators for flag manipulation and binary operations"
    requirements:
      - "Implement BitAnd trait for & operator on custom flag types"
      - "Create BitOr trait for | operator flag combinations"
      - "Design BitXor trait for ^ operator toggle operations"
      - "Implement Not trait for ! operator bitwise inversion"
    item_location: [17, 2]
    completion_message: "Bitwise operators complete! Flag manipulation and binary logic mastered."

  - id: 5
    name: "Advanced Operator Traits"
    description: "Implement sophisticated operators for indexing, dereferencing, and type conversion"
    requirements:
      - "Create Index and IndexMut traits for array-like bracket access"
      - "Implement Deref and DerefMut traits for smart pointer behavior"
      - "Design Display trait for user-friendly string representation"
      - "Create Debug trait for comprehensive debugging output"
      - "Implement From/Into traits for safe automatic type conversions"
    item_location: [8, 9]
    completion_message: "Advanced operators mastered! Complete operator overloading system achieved."

completion_requirements:
  - "Complete all 5 operator trait tasks"
  - "Defeat all operator-related enemies"
  - "Open all operator trait doors"
  - "Demonstrate mastery of arithmetic, comparison, bitwise, and advanced operator traits"

final_message: "Level 21 Complete: Operator Traits Virtuoso achieved! You've mastered the complete spectrum of operator overloading from basic arithmetic to advanced smart pointer behaviors. The foundations of Rust mastery are now complete!"